/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ClaimVerifierInterface extends utils.Interface {
  functions: {
    "checkClaim(address,uint256)": FunctionFragment;
    "claimIsValid(address,uint256)": FunctionFragment;
    "getRecoveredAddress(bytes,bytes32)": FunctionFragment;
    "trustedClaimIssuer()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkClaim"
      | "claimIsValid"
      | "getRecoveredAddress"
      | "trustedClaimIssuer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkClaim",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimIsValid",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveredAddress",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedClaimIssuer",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "checkClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimIsValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveredAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedClaimIssuer",
    data: BytesLike
  ): Result;

  events: {
    "ClaimInvalid(address,uint256)": EventFragment;
    "ClaimValid(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimInvalid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimValid"): EventFragment;
}

export interface ClaimInvalidEventObject {
  _identity: string;
  claimType: BigNumber;
}
export type ClaimInvalidEvent = TypedEvent<
  [string, BigNumber],
  ClaimInvalidEventObject
>;

export type ClaimInvalidEventFilter = TypedEventFilter<ClaimInvalidEvent>;

export interface ClaimValidEventObject {
  _identity: string;
  claimType: BigNumber;
}
export type ClaimValidEvent = TypedEvent<
  [string, BigNumber],
  ClaimValidEventObject
>;

export type ClaimValidEventFilter = TypedEventFilter<ClaimValidEvent>;

export interface ClaimVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClaimVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkClaim(
      _identity: PromiseOrValue<string>,
      claimType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimIsValid(
      _identity: PromiseOrValue<string>,
      claimType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { claimValid: boolean }>;

    getRecoveredAddress(
      sig: PromiseOrValue<BytesLike>,
      dataHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { addr: string }>;

    trustedClaimIssuer(overrides?: CallOverrides): Promise<[string]>;
  };

  checkClaim(
    _identity: PromiseOrValue<string>,
    claimType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimIsValid(
    _identity: PromiseOrValue<string>,
    claimType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRecoveredAddress(
    sig: PromiseOrValue<BytesLike>,
    dataHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  trustedClaimIssuer(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    checkClaim(
      _identity: PromiseOrValue<string>,
      claimType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimIsValid(
      _identity: PromiseOrValue<string>,
      claimType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRecoveredAddress(
      sig: PromiseOrValue<BytesLike>,
      dataHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    trustedClaimIssuer(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ClaimInvalid(address,uint256)"(
      _identity?: null,
      claimType?: null
    ): ClaimInvalidEventFilter;
    ClaimInvalid(_identity?: null, claimType?: null): ClaimInvalidEventFilter;

    "ClaimValid(address,uint256)"(
      _identity?: null,
      claimType?: null
    ): ClaimValidEventFilter;
    ClaimValid(_identity?: null, claimType?: null): ClaimValidEventFilter;
  };

  estimateGas: {
    checkClaim(
      _identity: PromiseOrValue<string>,
      claimType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimIsValid(
      _identity: PromiseOrValue<string>,
      claimType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecoveredAddress(
      sig: PromiseOrValue<BytesLike>,
      dataHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trustedClaimIssuer(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkClaim(
      _identity: PromiseOrValue<string>,
      claimType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimIsValid(
      _identity: PromiseOrValue<string>,
      claimType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveredAddress(
      sig: PromiseOrValue<BytesLike>,
      dataHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trustedClaimIssuer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
