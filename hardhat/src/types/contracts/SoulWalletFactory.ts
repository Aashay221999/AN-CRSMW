/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SoulWalletFactoryInterface extends utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "createWallet(address,address,uint32,uint32,address,bytes32)": FunctionFragment;
    "getWalletAddress(address,address,uint32,uint32,address,bytes32)": FunctionFragment;
    "isWalletActive(address)": FunctionFragment;
    "singletonFactory()": FunctionFragment;
    "walletImpl()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "VERSION"
      | "createWallet"
      | "getWalletAddress"
      | "isWalletActive"
      | "singletonFactory"
      | "walletImpl"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createWallet",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isWalletActive",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "singletonFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "walletImpl",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWalletActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singletonFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "walletImpl", data: BytesLike): Result;

  events: {
    "SoulWalletCreated(address,address,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SoulWalletCreated"): EventFragment;
}

export interface SoulWalletCreatedEventObject {
  _proxy: string;
  _owner: string;
  _implementation: string;
  version: string;
}
export type SoulWalletCreatedEvent = TypedEvent<
  [string, string, string, string],
  SoulWalletCreatedEventObject
>;

export type SoulWalletCreatedEventFilter =
  TypedEventFilter<SoulWalletCreatedEvent>;

export interface SoulWalletFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SoulWalletFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    createWallet(
      _entryPoint: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _upgradeDelay: PromiseOrValue<BigNumberish>,
      _guardianDelay: PromiseOrValue<BigNumberish>,
      _guardian: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getWalletAddress(
      _entryPoint: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _upgradeDelay: PromiseOrValue<BigNumberish>,
      _guardianDelay: PromiseOrValue<BigNumberish>,
      _guardian: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isWalletActive(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    singletonFactory(overrides?: CallOverrides): Promise<[string]>;

    walletImpl(overrides?: CallOverrides): Promise<[string]>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  createWallet(
    _entryPoint: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    _upgradeDelay: PromiseOrValue<BigNumberish>,
    _guardianDelay: PromiseOrValue<BigNumberish>,
    _guardian: PromiseOrValue<string>,
    _salt: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getWalletAddress(
    _entryPoint: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    _upgradeDelay: PromiseOrValue<BigNumberish>,
    _guardianDelay: PromiseOrValue<BigNumberish>,
    _guardian: PromiseOrValue<string>,
    _salt: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  isWalletActive(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  singletonFactory(overrides?: CallOverrides): Promise<string>;

  walletImpl(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    createWallet(
      _entryPoint: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _upgradeDelay: PromiseOrValue<BigNumberish>,
      _guardianDelay: PromiseOrValue<BigNumberish>,
      _guardian: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getWalletAddress(
      _entryPoint: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _upgradeDelay: PromiseOrValue<BigNumberish>,
      _guardianDelay: PromiseOrValue<BigNumberish>,
      _guardian: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    isWalletActive(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    singletonFactory(overrides?: CallOverrides): Promise<string>;

    walletImpl(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "SoulWalletCreated(address,address,address,string)"(
      _proxy?: PromiseOrValue<string> | null,
      _owner?: PromiseOrValue<string> | null,
      _implementation?: PromiseOrValue<string> | null,
      version?: null
    ): SoulWalletCreatedEventFilter;
    SoulWalletCreated(
      _proxy?: PromiseOrValue<string> | null,
      _owner?: PromiseOrValue<string> | null,
      _implementation?: PromiseOrValue<string> | null,
      version?: null
    ): SoulWalletCreatedEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    createWallet(
      _entryPoint: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _upgradeDelay: PromiseOrValue<BigNumberish>,
      _guardianDelay: PromiseOrValue<BigNumberish>,
      _guardian: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getWalletAddress(
      _entryPoint: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _upgradeDelay: PromiseOrValue<BigNumberish>,
      _guardianDelay: PromiseOrValue<BigNumberish>,
      _guardian: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWalletActive(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    singletonFactory(overrides?: CallOverrides): Promise<BigNumber>;

    walletImpl(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createWallet(
      _entryPoint: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _upgradeDelay: PromiseOrValue<BigNumberish>,
      _guardianDelay: PromiseOrValue<BigNumberish>,
      _guardian: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getWalletAddress(
      _entryPoint: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _upgradeDelay: PromiseOrValue<BigNumberish>,
      _guardianDelay: PromiseOrValue<BigNumberish>,
      _guardian: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWalletActive(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    singletonFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    walletImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
