/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IERC725v1,
  IERC725v1Interface,
} from "../../../contracts/interfaces/IERC725v1";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "executionId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "Approved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "purpose",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "keyType",
        type: "uint256",
      },
    ],
    name: "KeyAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "purpose",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "keyType",
        type: "uint256",
      },
    ],
    name: "KeyRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_key",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_purpose",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_keyType",
        type: "uint256",
      },
    ],
    name: "addKey",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_key",
        type: "bytes32",
      },
    ],
    name: "getKey",
    outputs: [
      {
        internalType: "uint256",
        name: "purpose",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "keyType",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_key",
        type: "bytes32",
      },
    ],
    name: "getKeyPurpose",
    outputs: [
      {
        internalType: "uint256",
        name: "purpose",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_purpose",
        type: "uint256",
      },
    ],
    name: "getKeysByPurpose",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "keys",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IERC725v1__factory {
  static readonly abi = _abi;
  static createInterface(): IERC725v1Interface {
    return new utils.Interface(_abi) as IERC725v1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IERC725v1 {
    return new Contract(address, _abi, signerOrProvider) as IERC725v1;
  }
}
